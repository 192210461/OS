#include <stdio.h>
#include <stdlib.h>
typedef struct {
    int id;         
    int priority;   
    int burst_time; 
    int remaining_time; 
    int arrival_time; 
} Process;
int findHighestPriorityProcess(Process *processes, int n, int current_time) {
    int highest_priority = -1;
    int selected_process = -1;
    for (int i = 0; i < n; ++i) {
        if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
            if (highest_priority == -1 || processes[i].priority < highest_priority) {
                highest_priority = processes[i].priority;
                selected_process = i;
            }
        }
    } 
    return selected_process;
}
void preemptivePriorityScheduling(Process *processes, int n) {
    int current_time = 0;
    int completed = 0;
    while (completed < n) {
        int selected_process = findHighestPriorityProcess(processes, n, current_time);
        if (selected_process == -1) {
            printf("No valid process found at time %d.\n", current_time);
            current_time++;
            continue;
        }
        printf("Executing process %d at time %d\n", processes[selected_process].id, current_time);
        processes[selected_process].remaining_time--;
        current_time++;
        if (processes[selected_process].remaining_time == 0) {
            completed++;
            printf("Process %d completed.\n", processes[selected_process].id);
        }
    }
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process *processes = (Process *) malloc(n * sizeof(Process));
    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }
    preemptivePriorityScheduling(processes, n);
    free(processes);
    return 0;
}
